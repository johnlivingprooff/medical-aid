# Generated by Django 5.0.14 on 2025-10-21

from django.db import migrations


def seed_notification_templates(apps, schema_editor):
    NotificationTemplate = apps.get_model('accounts', 'NotificationTemplate')
    NotificationChannel = apps.get_model('accounts', 'Notification')._meta.get_field('channel').choices  # not used directly

    # Helper to create if not exists (by name)
    def get_or_create_template(name, notification_type, channel, subject, body, html, variables):
        obj, created = NotificationTemplate.objects.get_or_create(
            name=name,
            defaults={
                'notification_type': notification_type,
                'channel': channel,
                'subject_template': subject,
                'body_template': body,
                'html_template': html,
                'template_variables': variables or {},
                'is_active': True,
            }
        )
        # If template exists but type/channel changed, update to ensure correctness
        changed = False
        if obj.notification_type != notification_type:
            obj.notification_type = notification_type
            changed = True
        if obj.channel != channel:
            obj.channel = channel
            changed = True
        if changed:
            obj.save(update_fields=['notification_type', 'channel'])
        return obj

    # Welcome Member (email)
    get_or_create_template(
        name='welcome_member_email',
        notification_type='WELCOME_MEMBER',
        channel='EMAIL',
        subject='Welcome to your medical aid subscription',
        body=(
            'Hi {member_name},\n\n'
            'Your {tier_name} subscription is now active from {start_date} to {end_date}.\n'
            "You're all set to start using your benefits.\n\n"
            'If you have any questions, reply to this email or contact support.'
        ),
        html=(
            '<h2>Welcome to your medical aid subscription</h2>'
            '<p>Hi {member_name},</p>'
            '<p>Your <strong>{tier_name}</strong> subscription is now active from <strong>{start_date}</strong> to <strong>{end_date}</strong>.</p>'
            "<p>You're all set to start using your benefits.</p>"
            '<p>If you have any questions, reply to this email or contact support.</p>'
        ),
        variables={'member_name': 'string', 'tier_name': 'string', 'start_date': 'date', 'end_date': 'date'}
    )

    # Subscription Renewal Reminder (email)
    get_or_create_template(
        name='subscription_renewal_reminder_email',
        notification_type='SUBSCRIPTION_RENEWAL_REMINDER',
        channel='EMAIL',
        subject='Your subscription ends on {end_date}',
        body=(
            'Hi {member_name},\n\n'
            'Your {tier_name} subscription ends on {end_date}.\n'
            'To avoid interruption of benefits, please renew before the expiry date.'
        ),
        html=(
            '<h2>Subscription ending soon</h2>'
            '<p>Hi {member_name},</p>'
            '<p>Your <strong>{tier_name}</strong> subscription ends on <strong>{end_date}</strong>.</p>'
            '<p>To avoid interruption of benefits, please renew before the expiry date.</p>'
        ),
        variables={'member_name': 'string', 'tier_name': 'string', 'end_date': 'date'}
    )

    # Member Message (email)
    get_or_create_template(
        name='member_message_email',
        notification_type='MEMBER_MESSAGE',
        channel='EMAIL',
        subject='New message from {sender_name}',
        body=(
            'You have a new message from {sender_name}:\n\n{preview}\n\n'
            'Please log in to your portal to view and respond.'
        ),
        html=(
            '<h2>New message</h2>'
            '<p>You have a new message from <strong>{sender_name}</strong>:</p>'
            '<blockquote>{preview}</blockquote>'
            '<p>Please log in to your portal to view and respond.</p>'
        ),
        variables={'sender_name': 'string', 'preview': 'string'}
    )


def noop_reverse(apps, schema_editor):
    # No-op: keep templates in place on reverse
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0005_notificationpreference_member_messages_enabled_and_more'),
    ]

    operations = [
        migrations.RunPython(seed_notification_templates, noop_reverse),
    ]
