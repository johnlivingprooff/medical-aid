# Generated by Django 5.0.14 on 2025-09-18 15:19

import core.encryption
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FraudAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('DUPLICATE_CLAIM', 'Duplicate Claim'), ('UNUSUAL_FREQUENCY', 'Unusual Frequency'), ('AMOUNT_ANOMALY', 'Amount Anomaly'), ('PROVIDER_PATTERN', 'Provider Pattern'), ('PATIENT_PATTERN', 'Patient Pattern'), ('SERVICE_MISMATCH', 'Service Mismatch'), ('TEMPORAL_ANOMALY', 'Temporal Anomaly'), ('NETWORK_VIOLATION', 'Network Violation')], max_length=20)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('REVIEWED', 'Reviewed'), ('DISMISSED', 'Dismissed'), ('ESCALATED', 'Escalated')], default='ACTIVE', max_length=10)),
                ('title', models.CharField(help_text='Brief description of the alert', max_length=200)),
                ('description', models.TextField(help_text='Detailed explanation of the fraud pattern detected')),
                ('fraud_score', models.DecimalField(decimal_places=3, help_text='Calculated fraud risk score (0.000-1.000)', max_digits=5)),
                ('detection_rule', models.CharField(help_text='Name of the rule that triggered this alert', max_length=100)),
                ('detection_data', models.JSONField(default=dict, help_text='Additional data from the detection algorithm')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Notes from the review process')),
                ('resolution_action', models.CharField(blank=True, help_text='Action taken to resolve the alert', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount approved for payment', max_digits=12)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('PARTIAL', 'Partially Paid'), ('CANCELLED', 'Cancelled'), ('DISPUTED', 'Disputed')], default='PENDING', max_length=20)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('patient_deductible', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('patient_copay', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('patient_coinsurance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider_bank_account', core.encryption.EncryptedCharField(blank=True, help_text='Provider bank account number (encrypted)', max_length=50)),
                ('provider_bank_name', core.encryption.EncryptedCharField(blank=True, help_text='Provider bank name (encrypted)', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_id', models.CharField(blank=True, editable=False, max_length=20, unique=True)),
                ('date_of_birth', core.encryption.EncryptedDateField(help_text="Patient's date of birth (encrypted for privacy)")),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('TERMINATED', 'Terminated')], default='ACTIVE', max_length=20)),
                ('enrollment_date', models.DateField(blank=True, help_text='Date of enrollment in the scheme', null=True)),
                ('benefit_year_start', models.DateField(blank=True, help_text='Custom benefit year start (if different from enrollment)', null=True)),
                ('relationship', models.CharField(choices=[('PRINCIPAL', 'Principal Member'), ('SPOUSE', 'Spouse'), ('CHILD', 'Child'), ('DEPENDENT', 'Other Dependent')], default='PRINCIPAL', max_length=20)),
                ('diagnoses', core.encryption.EncryptedTextField(blank=True, help_text='Patient diagnoses (encrypted PHI)')),
                ('investigations', core.encryption.EncryptedTextField(blank=True, help_text='Medical investigations (encrypted PHI)')),
                ('treatments', core.encryption.EncryptedTextField(blank=True, help_text='Medical treatments (encrypted PHI)')),
                ('phone', core.encryption.EncryptedCharField(blank=True, help_text='Patient phone number (encrypted)', max_length=20)),
                ('emergency_contact', core.encryption.EncryptedCharField(blank=True, help_text='Emergency contact name (encrypted)', max_length=100)),
                ('emergency_phone', core.encryption.EncryptedCharField(blank=True, help_text='Emergency contact phone (encrypted)', max_length=20)),
            ],
            options={
                'ordering': ['-enrollment_date'],
            },
        ),
        migrations.CreateModel(
            name='PreAuthorizationApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_type', models.CharField(choices=[('FULL', 'Full Approval'), ('PARTIAL', 'Partial Approval'), ('CONDITIONAL', 'Conditional Approval')], default='FULL', max_length=20)),
                ('approved_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('max_visits', models.PositiveIntegerField(blank=True, help_text='Maximum number of visits allowed', null=True)),
                ('validity_period_days', models.PositiveIntegerField(default=30, help_text='How many days approval is valid')),
                ('conditions', models.JSONField(blank=True, default=dict, help_text='Specific conditions for approval')),
                ('exclusions', models.JSONField(blank=True, default=dict, help_text='Services/procedures excluded from approval')),
                ('requires_followup', models.BooleanField(default=False)),
                ('followup_notes', core.encryption.EncryptedTextField(blank=True, help_text='Follow-up requirements (encrypted)')),
                ('approved_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approval_reference', models.CharField(editable=False, max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PreAuthorizationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('request_type', models.CharField(choices=[('INPATIENT', 'Inpatient Admission'), ('OUTPATIENT', 'Outpatient Procedure'), ('SURGERY', 'Surgical Procedure'), ('SPECIALIST', 'Specialist Consultation'), ('DIAGNOSTIC', 'Diagnostic Procedure'), ('MEDICATION', 'High-Cost Medication'), ('OTHER', 'Other')], max_length=20)),
                ('priority', models.CharField(choices=[('ROUTINE', 'Routine'), ('URGENT', 'Urgent'), ('EMERGENCY', 'Emergency')], default='ROUTINE', max_length=10)),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('date_requested', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_of_service', models.DateField(help_text='Proposed date of service')),
                ('requested_validity_days', models.PositiveIntegerField(default=30, help_text='How many days approval should be valid')),
                ('diagnosis', core.encryption.EncryptedTextField(help_text='Diagnosis requiring treatment (encrypted PHI)')),
                ('proposed_treatment', core.encryption.EncryptedTextField(help_text='Proposed treatment/procedure (encrypted PHI)')),
                ('clinical_notes', core.encryption.EncryptedTextField(blank=True, help_text='Additional clinical notes (encrypted PHI)')),
                ('supporting_documents', models.JSONField(blank=True, default=dict, help_text='URLs or references to supporting documents')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('processed_date', models.DateTimeField(blank=True, null=True)),
                ('approved_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('approval_notes', core.encryption.EncryptedTextField(blank=True, help_text='Approval conditions/notes (encrypted)')),
                ('approval_expiry', models.DateField(blank=True, null=True)),
                ('rejection_reason', core.encryption.EncryptedTextField(blank=True, help_text='Rejection reason (encrypted)')),
                ('rejection_date', models.DateTimeField(blank=True, null=True)),
                ('auto_approved', models.BooleanField(default=False)),
                ('approval_rule_applied', models.CharField(blank=True, help_text='Name of auto-approval rule applied', max_length=100)),
            ],
            options={
                'ordering': ['-date_requested'],
            },
        ),
        migrations.CreateModel(
            name='PreAuthorizationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('rule_type', models.CharField(choices=[('COST_THRESHOLD', 'Cost Threshold'), ('SERVICE_TYPE', 'Service Type'), ('PROVIDER_TIER', 'Provider Tier'), ('PATIENT_HISTORY', 'Patient History'), ('DIAGNOSIS_BASED', 'Diagnosis Based'), ('COMPOSITE', 'Composite Rule')], max_length=20)),
                ('action', models.CharField(choices=[('AUTO_APPROVE', 'Auto Approve'), ('AUTO_REJECT', 'Auto Reject'), ('ESCALATE', 'Escalate for Review'), ('REQUIRE_DOCUMENTATION', 'Require Additional Documentation')], default='ESCALATE', max_length=25)),
                ('conditions', models.JSONField(default=dict, help_text='Rule conditions in JSON format')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.PositiveIntegerField(default=100, help_text='Lower number = higher priority')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('date_submitted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_of_service', models.DateField(blank=True, help_text='Date when the service was provided', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('REQUIRES_PREAUTH', 'Requires Pre-authorization'), ('INVESTIGATING', 'Under Investigation')], default='PENDING', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', max_length=10)),
                ('coverage_checked', models.BooleanField(default=False)),
                ('processed_date', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', core.encryption.EncryptedTextField(blank=True, help_text='Reason for claim rejection (encrypted)')),
                ('rejection_date', models.DateTimeField(blank=True, null=True)),
                ('diagnosis_code', core.encryption.EncryptedCharField(blank=True, help_text='ICD-10 or other diagnosis code (encrypted)', max_length=20)),
                ('procedure_code', core.encryption.EncryptedCharField(blank=True, help_text='CPT or other procedure code (encrypted)', max_length=20)),
                ('notes', core.encryption.EncryptedTextField(blank=True, help_text='Clinical notes (encrypted PHI)')),
                ('preauth_number', models.CharField(blank=True, max_length=50)),
                ('preauth_expiry', models.DateField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='processed_claims', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submitted_claims', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_submitted'],
            },
        ),
    ]
